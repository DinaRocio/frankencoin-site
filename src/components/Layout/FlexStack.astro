---
interface Props {
  direction?: "row" | "col";
  gap?: number | string;
  align?: "start" | "center" | "end" | "stretch" | "baseline";
  justify?: "start" | "center" | "end" | "between" | "around" | "evenly";
  wrap?: "nowrap" | "wrap" | "wrap-reverse";
  margin?: number | string;
  marginX?: number | string;
  marginY?: number | string;
  className?: string;
}

const {
  direction = "row",
  gap = 4,
  align = "stretch",
  justify = "start",
  wrap = "nowrap",
  margin,
  marginX,
  marginY,
  className = "",
} = Astro.props as Props;

const ALIGN_MAP: Record<string, string> = {
  start: "items-start",
  center: "items-center",
  end: "items-end",
  stretch: "items-stretch",
  baseline: "items-baseline",
};

const JUSTIFY_MAP: Record<string, string> = {
  start: "justify-start",
  center: "justify-center",
  end: "justify-end",
  between: "justify-between",
  around: "justify-around",
  evenly: "justify-evenly",
};

const WRAP_MAP: Record<string, string> = {
  nowrap: "flex-nowrap",
  wrap: "flex-wrap",
  "wrap-reverse": "flex-wrap-reverse",
};

const directionClass = direction === "row" ? "flex-row" : "flex-col";
const gapClass = typeof gap === "number" ? `gap-${gap}` : "";
const arbitraryGap = typeof gap === "string" ? gap : "";

// Mapeo de valores sem√°nticos a clases de Tailwind
const MARGIN_MAP: Record<string, string> = {
  xs: "1",
  sm: "2",
  md: "4",
  lg: "6",
  xl: "8",
  "2xl": "12",
};

// Generar clases de margen
const getMarginClasses = () => {
  let classes = "";

  if (margin) {
    if (typeof margin === "number") {
      classes += `m-${margin} `;
    } else if (typeof margin === "string" && MARGIN_MAP[margin]) {
      classes += `m-${MARGIN_MAP[margin]} `;
    }
  }

  if (marginX) {
    if (typeof marginX === "number") {
      classes += `mx-${marginX} `;
    } else if (typeof marginX === "string" && MARGIN_MAP[marginX]) {
      classes += `mx-${MARGIN_MAP[marginX]} `;
    }
  }

  if (marginY) {
    if (typeof marginY === "number") {
      classes += `my-${marginY} `;
    } else if (typeof marginY === "string" && MARGIN_MAP[marginY]) {
      classes += `my-${MARGIN_MAP[marginY]} `;
    }
  }

  return classes.trim();
};

const marginClasses = getMarginClasses();

const getMarginStyles = () => {
  const styles: string[] = [];

  if (margin && typeof margin === "string" && !MARGIN_MAP[margin]) {
    styles.push(`margin: ${margin}`);
  }

  if (marginX && typeof marginX === "string" && !MARGIN_MAP[marginX]) {
    styles.push(`margin-left: ${marginX}`, `margin-right: ${marginX}`);
  }

  if (marginY && typeof marginY === "string" && !MARGIN_MAP[marginY]) {
    styles.push(`margin-top: ${marginY}`, `margin-bottom: ${marginY}`);
  }

  return styles.join("; ");
};

const marginStyles = getMarginStyles();
---

<div
  class={`flex ${directionClass} ${ALIGN_MAP[align]} ${JUSTIFY_MAP[justify]} ${WRAP_MAP[wrap]} ${gapClass} ${marginClasses} ${className}`}
  style={`${arbitraryGap ? `gap: ${arbitraryGap}` : ""}${marginStyles ? `; ${marginStyles}` : ""}`}
>
  <slot />
</div>
